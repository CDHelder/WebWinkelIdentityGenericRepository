// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebWinkelIdentity.Data;

namespace WebWinkelIdentity.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210908103704_UserConfirmedShipment")]
    partial class UserConfirmedShipment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Streetname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Amsterdam",
                            Country = "Netherlands",
                            HouseNumber = 15,
                            PostalCode = "1264 KJ",
                            Streetname = "Polderweg",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Rotterdam",
                            Country = "Netherlands",
                            CustomerId = "52a5d716-a649-4476-b316-108d96c56112",
                            HouseNumber = 5,
                            PostalCode = "7431 GG",
                            Streetname = "Sesamstraat"
                        },
                        new
                        {
                            Id = 3,
                            City = "Den Haag",
                            Country = "Netherlands",
                            HouseNumber = 26,
                            PostalCode = "8137 YA",
                            Streetname = "Korte poten"
                        },
                        new
                        {
                            Id = 4,
                            City = "Rotterdam",
                            Country = "Netherlands",
                            HouseNumber = 12,
                            PostalCode = "6573 IK",
                            Streetname = "Lijnbaan"
                        },
                        new
                        {
                            Id = 5,
                            City = "Haarlem",
                            Country = "Netherlands",
                            HouseNumber = 18,
                            PostalCode = "2756 IK",
                            Streetname = "Zijlstraat"
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Veel te duur",
                            Name = "Gucci",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Veel te duur",
                            Name = "Versace",
                            SupplierId = 1
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Broek met wijde pijpen",
                            Name = "Broek"
                        },
                        new
                        {
                            Id = 2,
                            Description = "T-shirt met korte mouwen",
                            Name = "T-shirt"
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 2,
                            CustomerId = "52a5d716-a649-4476-b316-108d96c56112",
                            IsDelivered = false
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("OrderProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 1,
                            ProductId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 1,
                            ProductId = 4,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.LoadStockChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoadStockChanges");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fabric")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(38, 2)
                        .HasColumnType("decimal(38,2)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 2,
                            Color = "White",
                            Description = "Witte kleur met gucci logo",
                            Fabric = "100% Cotton",
                            Name = "Gucci T-shirt",
                            Price = 39.95m,
                            Size = "S"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CategoryId = 2,
                            Color = "White",
                            Description = "Witte kleur met gucci logo",
                            Fabric = "100% Cotton",
                            Name = "Gucci T-shirt",
                            Price = 39.95m,
                            Size = "M"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CategoryId = 2,
                            Color = "White",
                            Description = "Witte kleur met gucci logo",
                            Fabric = "100% Cotton",
                            Name = "Gucci T-shirt",
                            Price = 39.95m,
                            Size = "L"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            CategoryId = 2,
                            Color = "White",
                            Description = "Witte kleur met gucci logo",
                            Fabric = "100% Cotton",
                            Name = "Gucci T-shirt",
                            Price = 39.95m,
                            Size = "XL"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 1,
                            CategoryId = 1,
                            Color = "Light-Blue",
                            Description = "Lichte broek met gucci logo",
                            Fabric = "100% Cotton",
                            Name = "Gucci Broek",
                            Price = 59.95m,
                            Size = "S"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 1,
                            CategoryId = 1,
                            Color = "Light-Blue",
                            Description = "Lichte broek met gucci logo",
                            Fabric = "100% Cotton",
                            Name = "Gucci Broek",
                            Price = 59.95m,
                            Size = "M"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 1,
                            CategoryId = 1,
                            Color = "Light-Blue",
                            Description = "Lichte broek met gucci logo",
                            Fabric = "100% Cotton",
                            Name = "Gucci Broek",
                            Price = 59.95m,
                            Size = "L"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 1,
                            CategoryId = 1,
                            Color = "Light-Blue",
                            Description = "Lichte broek met gucci logo",
                            Fabric = "100% Cotton",
                            Name = "Gucci Broek",
                            Price = 59.95m,
                            Size = "XL"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 2,
                            CategoryId = 2,
                            Color = "Light-Yellow",
                            Description = "Licht shirt met versace logo",
                            Fabric = "100% Cotton",
                            Name = "Versace T-shirt",
                            Price = 45.95m,
                            Size = "S"
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 2,
                            CategoryId = 2,
                            Color = "Light-Yellow",
                            Description = "Licht shirt met versace logo",
                            Fabric = "100% Cotton",
                            Name = "Versace T-shirt",
                            Price = 45.95m,
                            Size = "M"
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 2,
                            CategoryId = 2,
                            Color = "Light-Yellow",
                            Description = "Licht shirt met versace logo",
                            Fabric = "100% Cotton",
                            Name = "Versace T-shirt",
                            Price = 45.95m,
                            Size = "L"
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 2,
                            CategoryId = 2,
                            Color = "Light-Yellow",
                            Description = "Licht shirt met versace logo",
                            Fabric = "100% Cotton",
                            Name = "Versace T-shirt",
                            Price = 45.95m,
                            Size = "XL"
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 2,
                            CategoryId = 1,
                            Color = "Dark-Blue",
                            Description = "Donkere broek met versace logo",
                            Fabric = "100% Cotton",
                            Name = "Versace Broek",
                            Price = 69.95m,
                            Size = "S"
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 2,
                            CategoryId = 1,
                            Color = "Dark-Blue",
                            Description = "Donkere broek met versace logo",
                            Fabric = "100% Cotton",
                            Name = "Versace Broek",
                            Price = 69.95m,
                            Size = "M"
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 2,
                            CategoryId = 1,
                            Color = "Dark-Blue",
                            Description = "Donkere broek met versace logo",
                            Fabric = "100% Cotton",
                            Name = "Versace Broek",
                            Price = 69.95m,
                            Size = "L"
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 2,
                            CategoryId = 1,
                            Color = "Dark-Blue",
                            Description = "Donkere broek met versace logo",
                            Fabric = "100% Cotton",
                            Name = "Versace Broek",
                            Price = 69.95m,
                            Size = "XL"
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.ProductStockChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LoadStockChangeId")
                        .HasColumnType("int");

                    b.Property<int>("StockChange")
                        .HasColumnType("int");

                    b.Property<int>("StoreProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoadStockChangeId");

                    b.HasIndex("StoreProductId");

                    b.ToTable("ProductStockChanges");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delivered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeliveredTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoadStockChangeId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserThatConfirmedId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LoadStockChangeId")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.HasIndex("UserThatConfirmedId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("WeekOpeningTimesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("WeekOpeningTimesId")
                        .IsUnique()
                        .HasFilter("[WeekOpeningTimesId] IS NOT NULL");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 4,
                            WeekOpeningTimesId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 5
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.StoreEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreEmployees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = "7036d951-7cc8-488f-b95b-10c2e96c31c9",
                            StoreId = 1
                        },
                        new
                        {
                            Id = 2,
                            EmployeeId = "7036d951-7cc8-488f-b95b-10c2e96c31c9",
                            StoreId = 2
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.StoreProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("InTransport")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InTransport = false,
                            ProductId = 1,
                            Quantity = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 2,
                            InTransport = false,
                            ProductId = 1,
                            Quantity = 1,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 3,
                            InTransport = false,
                            ProductId = 2,
                            Quantity = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 4,
                            InTransport = false,
                            ProductId = 2,
                            Quantity = 2,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 5,
                            InTransport = false,
                            ProductId = 3,
                            Quantity = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 6,
                            InTransport = false,
                            ProductId = 3,
                            Quantity = 2,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 7,
                            InTransport = false,
                            ProductId = 4,
                            Quantity = 1,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 8,
                            InTransport = false,
                            ProductId = 4,
                            Quantity = 2,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 9,
                            InTransport = false,
                            ProductId = 5,
                            Quantity = 1,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 10,
                            InTransport = false,
                            ProductId = 5,
                            Quantity = 2,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 11,
                            InTransport = false,
                            ProductId = 6,
                            Quantity = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 12,
                            InTransport = false,
                            ProductId = 6,
                            Quantity = 2,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 13,
                            InTransport = false,
                            ProductId = 7,
                            Quantity = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 14,
                            InTransport = false,
                            ProductId = 7,
                            Quantity = 2,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 15,
                            InTransport = false,
                            ProductId = 8,
                            Quantity = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 16,
                            InTransport = false,
                            ProductId = 8,
                            Quantity = 1,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 17,
                            InTransport = false,
                            ProductId = 9,
                            Quantity = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 18,
                            InTransport = false,
                            ProductId = 9,
                            Quantity = 1,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 19,
                            InTransport = false,
                            ProductId = 10,
                            Quantity = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 20,
                            InTransport = false,
                            ProductId = 10,
                            Quantity = 2,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 21,
                            InTransport = false,
                            ProductId = 11,
                            Quantity = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 22,
                            InTransport = false,
                            ProductId = 11,
                            Quantity = 2,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 23,
                            InTransport = false,
                            ProductId = 12,
                            Quantity = 1,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 24,
                            InTransport = false,
                            ProductId = 12,
                            Quantity = 2,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 25,
                            InTransport = false,
                            ProductId = 13,
                            Quantity = 1,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 26,
                            InTransport = false,
                            ProductId = 13,
                            Quantity = 2,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 27,
                            InTransport = false,
                            ProductId = 14,
                            Quantity = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 28,
                            InTransport = false,
                            ProductId = 14,
                            Quantity = 2,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 29,
                            InTransport = false,
                            ProductId = 15,
                            Quantity = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 30,
                            InTransport = false,
                            ProductId = 15,
                            Quantity = 2,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 31,
                            InTransport = false,
                            ProductId = 16,
                            Quantity = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 32,
                            InTransport = false,
                            ProductId = 16,
                            Quantity = 1,
                            StoreId = 2
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.WeekOpeningTimes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("FridayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("FridayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("MondayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("MondayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SaturdayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SaturdayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SundayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SundayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ThursdayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ThursdayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TuesdayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TuesdayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WednesdayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WednesdayOpeningTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("WeekOpeningTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FridayClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            FridayOpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            MondayClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            MondayOpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            SaturdayClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            SaturdayOpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            SundayClosingTime = new TimeSpan(0, 0, 0, 0, 0),
                            SundayOpeningTime = new TimeSpan(0, 0, 0, 0, 0),
                            ThursdayClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            ThursdayOpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            TuesdayClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            TuesdayOpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            WednesdayClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            WednesdayOpeningTime = new TimeSpan(0, 9, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "groothandel merkkleding",
                            Email = "GroothandelDeBos@gmail.com",
                            Name = "Kleding Groothandel de Bos",
                            PhoneNumber = 1012346543
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Customer", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "52a5d716-a649-4476-b316-108d96c56112",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "906acae0-390a-4c5b-8a55-5a0ab0be502a",
                            Email = "Jaap@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMsXTRqaw/dx5+g93SiKavhpZcO6SGUGxcPtfP7SCb6O1TTmUBtDvN2CRJ8AeyL3gw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Jaap123",
                            Name = "Jaap"
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Employee", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<bool>("CurrentlyEmployed")
                        .HasColumnType("bit");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = "7036d951-7cc8-488f-b95b-10c2e96c31c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60992b03-8edf-4b11-9a0d-8ed82b88e306",
                            Email = "Samantha@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGWnt8DLA3T+Bcdr1R1PLMPFLHXZv1tPPdR+JDSGIGAD+R5F9C2LwBgUwyOkNNHVqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f03fd67-9963-441c-9147-4f957bac2d62",
                            TwoFactorEnabled = false,
                            UserName = "Samantha123",
                            AddressId = 3,
                            CurrentlyEmployed = true,
                            IBAN = "NL76 INGB 007 4201 6969",
                            Name = "Samantha"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Address", b =>
                {
                    b.HasOne("WebWinkelIdentity.Core.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("WebWinkelIdentity.Core.Supplier", null)
                        .WithMany("Addresses")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Brand", b =>
                {
                    b.HasOne("WebWinkelIdentity.Core.Supplier", "Supplier")
                        .WithMany("Brands")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Order", b =>
                {
                    b.HasOne("WebWinkelIdentity.Core.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebWinkelIdentity.Core.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.OrderProduct", b =>
                {
                    b.HasOne("WebWinkelIdentity.Core.Order", null)
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebWinkelIdentity.Core.StoreEntities.Product", "Product")
                        .WithOne()
                        .HasForeignKey("WebWinkelIdentity.Core.OrderProduct", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.LoadStockChange", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AssociatedUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AssociatedUser");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.Product", b =>
                {
                    b.HasOne("WebWinkelIdentity.Core.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebWinkelIdentity.Core.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.ProductStockChange", b =>
                {
                    b.HasOne("WebWinkelIdentity.Core.StoreEntities.LoadStockChange", null)
                        .WithMany("ProductStockChanges")
                        .HasForeignKey("LoadStockChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebWinkelIdentity.Core.StoreEntities.StoreProduct", "StoreProduct")
                        .WithMany()
                        .HasForeignKey("StoreProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreProduct");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.Shipment", b =>
                {
                    b.HasOne("WebWinkelIdentity.Core.StoreEntities.LoadStockChange", "LoadStockChange")
                        .WithOne("Shipment")
                        .HasForeignKey("WebWinkelIdentity.Core.StoreEntities.Shipment", "LoadStockChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebWinkelIdentity.Core.StoreEntities.Store", "EndLocationStore")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UserThatConfirmed")
                        .WithMany()
                        .HasForeignKey("UserThatConfirmedId");

                    b.Navigation("EndLocationStore");

                    b.Navigation("LoadStockChange");

                    b.Navigation("UserThatConfirmed");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.Store", b =>
                {
                    b.HasOne("WebWinkelIdentity.Core.Address", "Address")
                        .WithOne()
                        .HasForeignKey("WebWinkelIdentity.Core.StoreEntities.Store", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebWinkelIdentity.Core.StoreEntities.WeekOpeningTimes", "WeekOpeningTimes")
                        .WithOne()
                        .HasForeignKey("WebWinkelIdentity.Core.StoreEntities.Store", "WeekOpeningTimesId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");

                    b.Navigation("WeekOpeningTimes");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.StoreEmployee", b =>
                {
                    b.HasOne("WebWinkelIdentity.Core.Employee", "Employee")
                        .WithMany("EmployeeStores")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("WebWinkelIdentity.Core.StoreEntities.Store", "Store")
                        .WithMany("StoreEmployees")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.StoreProduct", b =>
                {
                    b.HasOne("WebWinkelIdentity.Core.StoreEntities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebWinkelIdentity.Core.StoreEntities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Customer", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("WebWinkelIdentity.Core.Customer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Employee", b =>
                {
                    b.HasOne("WebWinkelIdentity.Core.Address", "Address")
                        .WithOne()
                        .HasForeignKey("WebWinkelIdentity.Core.Employee", "AddressId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("WebWinkelIdentity.Core.Employee", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.LoadStockChange", b =>
                {
                    b.Navigation("ProductStockChanges");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.StoreEntities.Store", b =>
                {
                    b.Navigation("StoreEmployees");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Supplier", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Brands");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebWinkelIdentity.Core.Employee", b =>
                {
                    b.Navigation("EmployeeStores");
                });
#pragma warning restore 612, 618
        }
    }
}
